{
  "name": "music-parser",
  "version": "0.5.1",
  "description": "Parse music notation",
  "main": "index.js",
  "scripts": {
    "test": "vows test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/danigb/music-parser.git"
  },
  "keywords": [
    "music",
    "measure",
    "parser",
    "note",
    "solfege",
    "theory",
    "teoria",
    "notation"
  ],
  "author": {
    "name": "danigb"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/danigb/music-parser/issues"
  },
  "homepage": "https://github.com/danigb/music-parser",
  "devDependencies": {
    "lodash": "^3.8.0",
    "vows": "^0.8.1"
  },
  "dependencies": {
    "note-duration": "^1.3.0",
    "time-meter": "^0.3.0"
  },
  "readme": "# music-parser\n\n[![Code Climate](https://codeclimate.com/github/danigb/music-parser/badges/gpa.svg)](https://codeclimate.com/github/danigb/music-parser)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\nMusic notation parser. It takes an string and returns an array of objects with the form `{ value: '', position: 0, duration: 0}`. You can parse durations or measures or a combination of both:\n\n```js\nvar parse = require('music-parser');\nparse('c/4 d/4 e/8 f/8 f#/8 g/8');\nparse('c/4+4 f/4 g/4 | c/4+4+4+4')\nparse('Cm | Dm7b5 G7 | Am');\nparse('(c d) (e f g a) | c/4 c#/8 d/8 (e f g)');\n```\n\nIt is agnostic about the value of the object. It only take cares about the duration, either by explicit duration (using `/`) or by dividing the measure length between the number of events.\n\nThis is used by [ScoreJS](http://github.com/danigb/scorejs) to parse music.\n\n## Installation\n\nInstall the npm module: `npm install --save music-parser`, and require the library:\n\n```js\nvar parse = require('music-parser');\n```\n\n### Usage\n\nYou can parse a string separated by `|`...\n\n```js\nparse('Cm | D0 G7 | Cm');\n// [{ value: 'Cm', position: 0,   duration: 1 },\n//  { value: 'D0', position: 1,   duration: 0.5  },\n//  { value: 'G7', position: 1.5, duration: 0.5  },\n//  { value: 'Cm', position: 2,   duration: 1  }]\n```\n\nYou can specify durations:\n\n```js\nvar melody = parse('a2/4 b2/4 c#3/8 d3/8');\n// [{ value: 'a2',  position: 0,      duration: 0.25 },\n//  { value: 'b2',  position: 0.25,   duration: 0.25 },\n//  { value: 'c#3', position: 0.5,    duration: 0.125 },\n//  { value: 'd3',  position: 0.625,  duration: 0.125 }]\n```\n\nThe duration can be expressed with numbers and dots (`\"4.\"`, `\"2..\"`), with\nletters and dots (`\"q.\"`, `\"w..\"`) or names (`\"quarter\"`). See [note-duration](http://github.com/danigb/note-duration)\n\nIf the duration is not specified, and there's no measure separator, the default duration is 4. But if there are any measure separators, the duration is calculated by dividing the measure length by the number of items. You can use parenthesis to group items and write complex rhythmic structures:\n\n```js\nparse('a b c d |'); // duration: 0.25, 0.25, 0.25, 0.25\nparse('a (b c)'); // durations: 0.5, 0.25, 0.25\nparse('a b (c d e)'); // durations: q, q, qt, qt, qt\nparse('(a _ _ b) (c d)') // durations: 0.375, 0.125, 0.25, 0.25\n```\n\nThe `_` symbol extends the duration of the previous item:\n\n```js\nparser'Cm | _ ');\n// [{ value: 'Cm', position: 0, duration: 2 }]\nparse('c d _ e | f _ _ g');\n// [{ value: 'c', position: 0,    duration: 0.25 }]\n// [{ value: 'd', position: 0.25, duration: 0.50 }]\n// [{ value: 'e', position: 0.75, duration: 0.25 }]\n// [{ value: 'f', position: 1,    duration: 0.75 }]\n// [{ value: 'g', position: 1.75, duration: 0.25 }]\n```\n\nYou can specify other time signatures (it's 4/4 by default):\n\n```js\nparse('Cm | D0 G7 | Cm', '6/8');\nparse('C | D / G | C', '3/4');\n```\n\n## Dependencies\n\nIt uses [time-meter](http://github.com/danigb/time-meter) to time signature operations.\n\nIt uses [note-duration](http://github.com/danigb/note-duration) to parse durations.\n\n## License\n\nMIT License\n",
  "readmeFilename": "README.md",
  "_id": "music-parser@0.5.1",
  "_shasum": "3637078cee1dd51f73560374ad501b7ceb9c6d29",
  "_from": "music-parser@",
  "_resolved": "https://registry.npmjs.org/music-parser/-/music-parser-0.5.1.tgz"
}
