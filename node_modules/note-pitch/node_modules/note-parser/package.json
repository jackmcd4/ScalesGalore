{
  "name": "note-parser",
  "version": "0.8.0",
  "description": "Parse music note, obtain pichClass, accidetals, octave, midi and freq",
  "main": "index.js",
  "scripts": {
    "test": "vows test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danigb/note-parser.git"
  },
  "keywords": [
    "note",
    "parse",
    "pitch",
    "pitchClass",
    "midi",
    "frequency",
    "music",
    "teoria",
    "solfege",
    "theory",
    "score"
  ],
  "author": {
    "name": "=",
    "email": "="
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/danigb/note-parser/issues"
  },
  "homepage": "https://github.com/danigb/note-parser#readme",
  "devDependencies": {
    "vows": "^0.8.1"
  },
  "readme": "# note-parser\n\nParse notes with javascript. Fast and simple: give it a string, obtain a hash\nwith note's pitchClass, accidentals, octave, midi number and frequency.\n\n## Usage\n\nAdd the module to your project: `npm i --save note-parser` and require it:\n```js\nvar parse = require('note-parser');\n```\n\n####Â parse(noteString [, defaultOctave, defaultValue ])\n\nUse the function to parse notes:\n\n```js\nparse('Db4');   // => { pc: 'd', acc: 'b', oct: 4, midi: 61, freq: 277.18 }\nparse('f##-2'); // => { pc: 'f', acc: '##', oct: -2, midi: -5, freq: 6.12 }\nparse('Eb++');  // => { pc: 'e', acc: 'b', oct: 6, midi: 87, freq: 1244.50 }\nparse('b#-');   // => { pc: 'b', acc: '#', oct: 3, midi: 60, freq: 261.62 }\nparse('g');     // => { pc: 'g', acc: '', oct: 4, midi: 67, freq: 391.99 }\n```\n\nThe parse method receives a string and return an object with the following\nattributes:\n- pc: pitchClass, the _letter_ of the note. From `\"a\"` to `\"g\"`. __Always__ in lowecase.\n- acc: a string with the accidentals. An empty string if no accidentals present.\n- oct: the octave as integer.\n- midi: the midi number\n- freq: the note frequency\n\nYou can change the default octave with the second parameter. Otherwise is 4:\n\n```js\nparse('C');      // => { pc: 'c', acc: '', oct: 4, midi: 60, freq: 261.63 }\nparse('C', 2);   // => { pc: 'c', acc: '', oct: 2, midi: 36, freq: 65.41 }\nparse('C+', 2);  // => { pc: 'c', acc: '', oct: 3, midi: 48, freq: 130.81 }\nparse('C--', 2); // => { pc: 'c', acc: '', oct: 0, midi: 12, freq: 16.35 }\n```\n\nIf defaultValue is not defined, the parse throws an exception if the note format is invalid.\nOtherwise returns the defaultValue:\n\n```js\nparse('blah'); // => throws Error\nparse('blah', 2, parse('C4')); // => { pc: 'c', acc: '', oct: 4 ... }\nparse('blah', 2, null); // => null\n```\n\nNote: _calling parse on a parsed object return itself_:\n\n```js\nvar n = parse('C');\nn === parse(n) // => true\n```\n\n#### parse.toString\n\nCall parse.toString to convert from the parsed object back to a string:\n\n```js\nparse.toString(parse('D#4')); // => 'd#4'\n```\n\n## License\n\nMIT License\n",
  "readmeFilename": "README.md",
  "_id": "note-parser@0.8.0",
  "_shasum": "1849107c1870f166419b435c4ecd452585712f14",
  "_from": "note-parser@^0.8.0",
  "_resolved": "https://registry.npmjs.org/note-parser/-/note-parser-0.8.0.tgz"
}
