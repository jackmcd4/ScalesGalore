{
  "name": "note-pitch",
  "version": "0.6.0",
  "description": "Musical note pitch manipulation",
  "main": "index.js",
  "scripts": {
    "test": "vows test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/danigb/note-pitch.git"
  },
  "keywords": [
    "note",
    "transpose",
    "music",
    "theory",
    "soflege",
    "interval"
  ],
  "author": {
    "name": "danigb",
    "email": "danigb@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/danigb/note-pitch/issues"
  },
  "homepage": "https://github.com/danigb/note-pitch#readme",
  "devDependencies": {
    "vows": "^0.8.1"
  },
  "dependencies": {
    "interval-parser": "^0.7.0",
    "note-parser": "^0.8.0"
  },
  "readme": "# note-pitch\n\n[![Code Climate](https://codeclimate.com/github/danigb/note-pitch/badges/gpa.svg)](https://codeclimate.com/github/danigb/note-pitch)\n[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://github.com/feross/standard)\n\nExtends [note-parser](http://github.com/danigb/note-parser) to add note pitch manipulation.\n\nAs an extension of note-parser, you can parse notes:\n\n```js\nvar Note = require('note-pitch');\nNote.parse('a4'); // => { pc: 'a', acc: '', oct: 4, midi: 69, freq: 440 }\n```\n\nBut also you can transpose them:\n\n```js\nNote.transpose('e4', 'M2'); // => 'f#4'\nNote.transpose('c2', [\"P1\",\"M2\",\"M3\"]); // => ['c2', 'd2', 'e2']\n```\n\nOr find distances (in intervals):\n\n```js\nNote.distance('c2', 'd2'); // => 'M2'\nNote.distance('c', ['c', 'd', 'eb', 'f', 'g']); // => ['P1', 'M2', 'm3', 'P4', 'P5']\n```\n\n## Installation\n\nInstall the module: `npm i --save note-pitch` and require it:\n\n```js\nvar Note = require('note-pitch');\n```\n\nIf you want to use it inside a browser you will need a node module compatible\npackager (like browserify or webpack).\n\nThis is part of a higher level library\nthat performs transpositions (and much more) ready to browser:\n[ScoreJs](http://github.com/danigb/ScoreJS)\n\n## API\n\n### Note.parse(note)\n\nReturns the note as parsed object.\nSee [note-parser](http://github.com/danigb/note-parser) for more information.\n\n### Note.semitones(noteA, noteB)\n\nReturns the distance in semitones between noteA and noteB (can be positive or negative number)\n\n### Note.transpose(note, interval)\n\nTranspose the given note by a interval:\n\n```js\nNote.transpose('g5', 'm3'); // => \"bb5\";\n```\n\nIf you skip the note, you get a _transposer_, a function that transpose notes by\na certain interval:\n\n```js\nvar transposer = Note.transpose('M2');\ntransposer('c2'); // => \"d2\"\ntransposer('d2'); // => \"e2\"\ntransposer('e2'); // => \"f#2\"\n```\n\nAlso, you can specify an array of intervals, ideal for building chords or scales:\n\n```js\nNote.transpose('c2', ['P1', 'M2', 'm3']); // => [\"c2\", \"d2\", \"eb3\"]\nNote.transpose('a2', ['P1', 'M3', 'P5']); // => [\"a2\", \"c#3\", \"e3\"]\n```\n\n### Note.distance(root, notes)\n\nReturns the distance between a root note and a list of notes:\n\n```js\nNote.distance('c2', 'd2'); // => \"M2\"\nNote.distance('c2', ['c2', 'd2', 'e2']); // => ['P1', 'M2', 'M3']\n```\n\nIf you skip the notes, you get a _distancer_, a function that returns the\ndistance from the root to another note:\n\n```js\nvar distance = Note.distance('c2');\ndistance('c2'); // => 'P1'\ndistance('d2'); // => 'M2'\n```\n\n## License\n\nMIT License\n",
  "readmeFilename": "README.md",
  "_id": "note-pitch@0.6.0",
  "_shasum": "cd2f2319c40258da19755a6e25fa7ed574810282",
  "_from": "note-pitch@",
  "_resolved": "https://registry.npmjs.org/note-pitch/-/note-pitch-0.6.0.tgz"
}
